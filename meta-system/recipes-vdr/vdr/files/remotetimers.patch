diff -rNu git.orig/config.h git/config.h
--- git.orig/config.h	2014-10-18 20:04:38.849714837 +0200
+++ git/config.h	2014-10-18 20:05:08.713879082 +0200
@@ -36,6 +36,8 @@
 // plugins to work with newer versions of the core VDR as long as no
 // VDR header files have changed.
 
+#define REMOTEINSTANTVERSION 1.0
+
 #define MAXPRIORITY       99
 #define MINPRIORITY       (-MAXPRIORITY)
 #define LIVEPRIORITY      0                  // priority used when selecting a device for live viewing
diff -rNu git.orig/menu.c git/menu.c
--- git.orig/menu.c	2014-10-18 20:04:38.865714924 +0200
+++ git/menu.c	2014-10-18 20:05:08.713879082 +0200
@@ -32,6 +32,8 @@
 #include "transfer.h"
 #include "videodir.h"
 
+#include "remotetimers.h"
+
 #define MAXWAIT4EPGINFO   3 // seconds
 #define MODETIMEOUT       3 // seconds
 #define NEWTIMERLIMIT   120 // seconds until the start time of a new timer created from the Schedule menu,
@@ -4729,6 +4731,50 @@
 
 bool cRecordControls::Start(cTimer *Timer, bool Pause)
 {
+  if (!Timer) {
+     cTimer *t = new cTimer(true, Pause);
+
+     //get event
+     cSchedulesLock SchedulesLock;
+     const cEvent *event = NULL;;
+     const cSchedules *Schedules = cSchedules::Schedules(SchedulesLock);
+     if (Schedules) {
+        const cSchedule *Schedule = Schedules->GetSchedule(t->Channel());
+        if (Schedule) {
+           event = Schedule->GetEventAround(t->StartTime() + INSTANT_REC_EPG_LOOKAHEAD);
+        }
+     }
+
+     if (cPluginManager::GetPlugin("timersync")) {
+        // sets the file name
+        cRecording recording(t, event);
+        Timers.Add(t);
+        Timers.SetModified();
+        if (!cReplayControl::LastReplayed())
+           cReplayControl::SetRecording(recording.FileName());
+        return true;
+     }
+     else {
+        RemoteTimers_InstantRecording_v1_0 ir;
+        ir.timer = t;
+        ir.pause = Pause;
+        ir.event = event;
+        ir.name = NULL;
+        ir.fileName = NULL;
+ 
+        if (cPluginManager::CallFirstService("RemoteTimers::InstantRecording-v1.0", &ir)) {
+           if (!cReplayControl::LastReplayed())
+              cReplayControl::SetRecording(ir.fileName);
+ 	  delete t;
+ 	  // empty names indicate an error
+ 	  return *ir.fileName && *ir.name;
+        }
+        // service disabled or an error occured and the user confirmed local recording
+        // fall through to local instant recording
+     }
+     delete t;
+  }
+
   static time_t LastNoDiskSpaceMessage = 0;
   int FreeMB = 0;
   if (Timer) {
diff -rNu git.orig/remotetimers.h git/remotetimers.h
--- git.orig/remotetimers.h	1970-01-01 01:00:00.000000000 +0100
+++ git/remotetimers.h	2014-10-18 20:05:19.461938193 +0200
@@ -0,0 +1,182 @@
+/*
+ * remotetimers.h: Public interface of the plugin's services
+ *
+ * Copyright (C) 2008-2013 Frank Schmirler <vdr@schmirler.de>
+ *
+ * This file is part of VDR Plugin remotetimers.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ * Or, point your browser to http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
+ */
+
+#ifndef _SERVICE__H
+#define _SERVICE__H
+
+#include "timers.h"
+#include "epg.h"
+#include "osdbase.h"
+
+/*
+ * If the Data argument is NULL, all service calls return true.
+ * Otherwise the return value indicates success or failure of the service call.
+ *
+ * The service calls are not thread safe and must be called from the VDR main loop.
+ */
+
+/*
+ * RemoteTimers::InstantRecording-v1.0
+ * Start an instant recording or pause live TV. VDR needs to be patched to support this.
+ * The service returns false if a local timer should be used. An error occured if true is returned but the out parameters name and fileName are NULL.
+ * Data points to the following structure where pause indicates if it is an instant recording or an attempt to pause live TV.
+ */
+
+struct RemoteTimers_InstantRecording_v1_0 {
+//in
+	const cTimer	*timer;
+	bool		pause;
+	const cEvent	*event;
+//out
+	cString		name;
+	cString		fileName;
+};
+
+/* 
+ * RemoteTimers::RefreshTimers-v1.0
+ * Fetch timer list from remote VDR. You must call this service before you can use one of the service calls below.
+ * Data points to a cString which in case of failure (service call returns false) contains an error message.
+ */
+
+//out
+//	cString errorMsg;
+
+/*
+ * RemoteTimers::ForEachConflict-v1.0
+ * Iterates the list of remote timer conflicts.
+ * The service call always returns true.
+ * Data points to a const char* which must be NULL to return the first conflict. Pass the previously returned conflict to get the next one until const char* is NULL.
+ *
+ */
+//in+out
+//	const char* conflict;
+
+/*
+ * RemoteTimers::ForEach-v1.0
+ * Iterates the list of remote timers.
+ * The service call always returns true.
+ * Data points to a cTimer* which must be NULL to return the first timer. Pass the previously returned timer to get the next one until cTimer* is NULL.
+ *
+ * RemoteTimers::GetTimer-v1.0
+ * Test if the timer exists as either a remote or a local timer. 
+ * The service call always returns true.
+ * Data points to a cTimer* which points to the timer you are looking for. If found, cTimer* will point to the timer, otherwise it will be NULL.
+ */
+
+//in+out
+//	cTimer* timer;
+
+/*
+ * RemoteTimers::GetMatch-v1.0
+ * Find the remote or local timer which matches the event best.
+ * The service call always returns true.
+ * Data points to the following structure:
+ */
+
+struct RemoteTimers_GetMatch_v1_0 {
+//in
+	const cEvent	*event;
+//out
+	cTimer		*timer;
+	int		timerMatch;
+	int		timerType;
+	bool		isRemote;
+};
+
+/*
+ * RemoteTimers::GetTimerByEvent-v1.0
+ * Find the remote or local timer matching the event.
+ * If no timer matches, the service call returns false.
+ * Data points to a RemoteTimers_Event_v1_0 struct.
+ *
+ * RemoteTimers::NewTimerByEvent-v1.0
+ * Add a new timer for an event.
+ * In case of an error, the service call returns false and the structure includes an error message.
+ * Data points to a RemoteTimers_Event_v1_0 struct.
+ */
+
+struct RemoteTimers_Event_v1_0 {
+//in
+        const cEvent    *event;
+//out
+	cTimer		*timer;
+	cString		errorMsg;
+};
+
+/*
+ * RemoteTimers::NewTimer-v1.0
+ * Add a new timer.
+ * In case of an error, the service call returns false and the structure includes an error message.
+ * Data points to a RemoteTimers_Timer_v1_0 struct.
+ *
+ * RemoteTimers::ModTimer-v1.0
+ * Change an existing timer.
+ * In case of an error, the service call returns false and the structure includes an error message.
+ * Data points to a RemoteTimers_Timer_v1_0 struct.
+ *
+ * RemoteTimers::DelTimer-v1.0
+ * Delete an existing timer.
+ * In case of an error, the service call returns false and the structure includes an error message.
+ * Data points to a RemoteTimers_Timer_v1_0 struct.
+ */
+
+struct RemoteTimers_Timer_v1_0 {
+//in+out
+	cTimer		*timer;
+//out
+	cString		errorMsg;
+};
+
+/*
+ * RemoteTimers::GetTimerById-v1.0
+ * Get a remote timer by its id (i.e. timer->Index()+1 on remote machine).
+ * The service call always returns true.
+ * Data must point to a RemoteTimers_Timer_v1_1 structure. errorMsg is unused.
+ * NULL is returned as timer if no remote timer exists for the given id locally.
+ * Note that a timer with this id may exist remotely. This can happen if the
+ * remote timer's channel doesn't exist on the local machine.
+ */
+
+struct RemoteTimers_Timer_v1_1 {
+//in+out
+	cTimer		*timer;
+	int		id;
+//out
+	cString		errorMsg;
+};
+
+/*
+ * RemoteTimers::Menu-v1.0
+ * Depending on the state parameter, open the Timers or Schedule menu.
+ * In case of an error, menu is NULL.
+ * Data points to a RemoteTimers_Menu_v1_0 struct.
+ */
+struct RemoteTimers_Menu_v1_0 {
+//in
+	const char	*serverIp;
+	unsigned short	serverPort;
+	eOSState	state;
+//out
+	cOsdMenu	*menu;
+};
+#endif //_SERVICE__H
diff -rNu git.orig/skinlcars.c git/skinlcars.c
--- git.orig/skinlcars.c	2014-10-18 20:04:38.849714837 +0200
+++ git/skinlcars.c	2014-10-18 20:05:08.733879192 +0200
@@ -31,6 +31,19 @@
 #include "themes.h"
 #include "videodir.h"
 
+// BEGIN remotetimers_skinlcars.patch
+#include "plugin.h"
+#include "remotetimers.h"
+
+namespace PluginRemoteTimers {
+   // copy of timers.c CompareTimers
+   static int CompareTimers(const void *a, const void *b)
+   {
+     return (*(const cTimer **)a)->Compare(**(const cTimer **)b);
+   }
+}
+// END remotetimers_skinlcars.patch
+
 #include "symbols/arrowdown.xpm"
 #include "symbols/arrowup.xpm"
 #include "symbols/audio.xpm"
@@ -1244,12 +1257,25 @@
 
 void cSkinLCARSDisplayMenu::DrawTimers(void)
 {
-  if (Timers.Modified(lastTimersState)) {
+  static cPlugin* pRemoteTimers = cPluginManager::CallFirstService("RemoteTimers::RefreshTimers-v1.0", NULL);
+  cString errorMsg;
+  bool drawRemoteTimers = false;
+  if (pRemoteTimers && initial) {
+     drawRemoteTimers = pRemoteTimers->Service("RemoteTimers::RefreshTimers-v1.0", &errorMsg);
+     }
+
+  if (Timers.Modified(lastTimersState) || drawRemoteTimers) {
      deviceRecording.Clear();
      const cFont *font = cFont::GetFont(fontOsd);
      osd->DrawRectangle(xs00, ys04, xs04 - 1, ys05 - 1, Theme.Color(clrBackground));
      osd->DrawRectangle(xs07, ys04, xs13 - 1, ys05 - 1, Theme.Color(clrBackground));
      cSortedTimers SortedTimers;
+     if (drawRemoteTimers) {
+        cTimer* timer = NULL;
+        while (pRemoteTimers->Service("RemoteTimers::ForEach-v1.0", &timer) && timer != NULL)
+              SortedTimers.Append(timer);
+        SortedTimers.Sort(PluginRemoteTimers::CompareTimers);
+        }
      cVector<int> FreeDeviceSlots;
      int NumDevices = 0;
      int y = ys04;
@@ -1261,7 +1287,7 @@
                if (y + lineHeight > ys05)
                   break;
                if (const cTimer *Timer = SortedTimers[i]) {
-                  if (Timer->Recording()) {
+                  if (Timer->Recording() && cRecordControls::GetRecordControl(Timer)) {
                      if (cRecordControl *RecordControl = cRecordControls::GetRecordControl(Timer)) {
                         if (!Device || Device == RecordControl->Device()) {
                            DrawTimer(Timer, y, NumTimers > 0);
@@ -1319,6 +1345,8 @@
          }
      osd->DrawText(xs02, ys00, itoa(NumTimers), Theme.Color(clrMenuFrameFg), frameColor, font, xs03 - xs02, ys01 - ys00, taBottom | taLeft | taBorder);
      osd->DrawText(xs08, ys00, itoa(NumDevices), Theme.Color(clrMenuFrameFg), frameColor, font, xs09 - xs08, ys01 - ys00, taBottom | taRight | taBorder);
+     if (*errorMsg)
+        SetMessage(mtError, *errorMsg);
      lastSignalDisplay = 0;
      initial = true; // forces redrawing of devices
      }
